int count_moves(numbers *list1, numbers *list2, numbers *ptr)
{
    int moves = 0;
    numbers *ptr2 = list2;
    numbers *ptr3 = NULL;

    // Traverse list2 to find the insertion point
    while (ptr2 != NULL)
    {
        ptr3 = ptr2;
        if ((ptr->number < ptr3->number && ptr->number > ptr2->number) || 
            (ptr->number > get_max(list2) && ptr2->number == get_max(list2)) || 
            (ptr->number < get_min(list2) && ptr2->number == get_max(list2)))
        {
            break;
        }
        ptr2 = ptr2->next;
    }

    // Handle empty list2 or insertion point not found
    if (ptr2 == NULL)
        return -1;  // Or another value to indicate an invalid state

    // Check for same move optimization
    int same_moves = same_move(list1, list2, ptr, ptr2);
    if (same_moves != 0)
        return same_moves;

    // Calculate moves for list1
    int index_list1 = get_index(list1, ptr->number);
    int size_list1 = numsize(list1);
    if (index_list1 <= size_list1 / 2)
        moves = index_list1;
    else
        moves = size_list1 - index_list1 + 2;

    // Calculate moves for list2
    int index_list2 = get_index(list2, ptr2->number);
    int size_list2 = numsize(list2);
    if (index_list2 <= size_list2 / 2)
        moves += index_list2;
    else
        moves += size_list2 - index_list2 + 2;

    return moves;
}




int count_moves(numbers *list1, numbers *list2, numbers *ptr)
{
	int moves = 0;
	numbers *ptr2;
	numbers *ptr3;

	ptr2 = list2;
	ptr3 = ptr2;
	while(!((ptr->number < ptr3->number && ptr->number > ptr2->number) || (ptr->number > get_max(list2) && ptr2->number == get_max(list2)) || (ptr->number < get_min(list2) && ptr2->number == get_max(list2))) && ptr2 != NULL)
	{
		ptr3 = ptr2;
		ptr2 = ptr2->next;
	}
	if(same_move(list1, list2, ptr, ptr2) != 0)
		return (same_move(list1, list2, ptr, ptr2));
		// printf("h");
	if(get_index(list1, ptr->number) <= numsize(list1) / 2)
		moves = get_index(list1, ptr->number);
	else
		moves = numsize(list1) - get_index(list1, ptr->number) + 2;
	// printf("moves %d\n", moves);
	if(get_index(list2, ptr2->number) <= numsize(list2) / 2)
		moves += get_index(list2, ptr2->number);
	else
		moves += numsize(list2) - get_index(list2, ptr2->number) + 2;
	return moves;
}